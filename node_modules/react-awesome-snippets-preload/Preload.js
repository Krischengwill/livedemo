var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*eslint no-loop-func: 0*/
import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import { CSSTransition } from 'react-transition-group';

var Preload = (_temp2 = _class = function (_Component) {
    _inherits(Preload, _Component);

    function Preload() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Preload);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Preload.__proto__ || Object.getPrototypeOf(Preload)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            percent: 0
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Preload, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var allImgs = this.props.images;
            var filesNum = allImgs.length;
            var syncLoadNum = this.props.parallel; //同时加载图片数量
            var loaded = 0;

            //console.time('Preload time');

            var chain = Promise.resolve(); //Promise链

            var _loop = function _loop(i) {
                chain = chain.then(function () {
                    var tasks = [];

                    var _loop2 = function _loop2(j) {
                        var img = allImgs[i + j];
                        if (!img) {
                            return 'continue';
                        }

                        tasks.push(new Promise(function (resolve) {
                            var image = new Image();
                            var onload = function onload() {
                                resolve();
                                clearTimeout(timer);
                                image.onload = image.onerror = null;

                                _this2.setState({
                                    percent: ++loaded / filesNum
                                });
                            };
                            var timer = setTimeout(onload, 800); //如果某张图片加载时间过长，则跳过

                            image.onload = image.onerror = onload;
                            image.src = img;
                        }));
                    };

                    for (var j = 0; j < syncLoadNum; j++) {
                        var _ret3 = _loop2(j);

                        if (_ret3 === 'continue') continue;
                    }

                    return Promise.all(tasks);
                });
            };

            for (var i = 0; i < filesNum; i += syncLoadNum) {
                _loop(i);
            }

            // 资源缓存完毕
            chain.then(function () {
                //console.timeEnd('Preload time');
            });

            chain.then(this.props.onload);
        }
    }, {
        key: 'render',
        value: function render() {
            var percent = this.state.percent;

            var _props = this.props,
                component = _props.component,
                props = _objectWithoutProperties(_props, ['component']);

            if (typeof component === 'function') {
                var Children = component;

                component = React.createElement(Children, { percent: percent });
            }

            return React.createElement(
                Fragment,
                null,
                percent >= 1 && this.props.children,
                React.createElement(
                    CSSTransition,
                    Object.assign({}, props, { 'in': percent < 1 }),
                    component || React.createElement(
                        'div',
                        null,
                        (percent * 100).toFixed(0),
                        '%'
                    )
                )
            );
        }
    }]);

    return Preload;
}(Component), _class.defaultProps = {
    parallel: 5,
    classNames: 'preload',
    timeout: 1000,
    unmountOnExit: true,
    addEndListener: function addEndListener(node, done) {
        node.addEventListener('transitionend', function (e) {
            //确保动画来自于目标节点
            if (e.target === node) {
                done();
            }
        }, false);
    }
}, _class.propTypes = {
    children: PropTypes.element.isRequired,
    component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
    images: PropTypes.array.isRequired,
    parallel: PropTypes.number
}, _temp2);


export default Preload;