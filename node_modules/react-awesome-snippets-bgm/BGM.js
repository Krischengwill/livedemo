var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var BGM = function (_Component) {
    _inherits(BGM, _Component);

    function BGM(props) {
        _classCallCheck(this, BGM);

        var _this = _possibleConstructorReturn(this, (BGM.__proto__ || Object.getPrototypeOf(BGM)).call(this, props));

        _this.onpause = function () {
            return _this.setState({
                playing: false
            }, _this.props.onpause);
        };

        _this.onplay = function () {
            return _this.setState({
                playing: true
            }, _this.props.onplay);
        };

        _this.autoplay = function (ev) {
            var player = _this.refs.player;
            var box = _this.refs.box;

            if ((!ev || ev.target !== box && !box.contains(ev.target)) && !_this.userClicked && player.paused) {
                if (typeof WeixinJSBridge !== 'undefined') {
                    window.WeixinJSBridge.invoke('getNetworkType', {}, function (e) {
                        player.play();
                    });
                } else if (typeof WeiboJSBridge !== 'undefined') {
                    window.WeiboJSBridge.invoke('getNetworkType', {}, function (e) {
                        player.play();
                    });
                } else {
                    var playPromise = player.play(); //尝试直接播放

                    if (playPromise && playPromise.catch) {
                        playPromise.catch(function (err) {
                            console.log('Failed to play bgm:', err);
                        });
                    }

                    //依然无法播放
                    if (player.paused) {
                        document.addEventListener('touchstart', _this.autoplay, false);
                        document.addEventListener('mousedown', _this.autoplay, false);
                        document.addEventListener('WeixinJSBridgeReady', _this.autoplay, false);
                        document.addEventListener('WeiboJSBridgeReady', _this.autoplay, false);
                    }
                }
            }

            if (player.paused === false || _this.userClicked) {
                //移除事件绑定
                _this.unhandle();
            }
        };

        _this.unhandle = function () {
            document.removeEventListener('touchstart', _this.autoplay, false);
            document.removeEventListener('mousedown', _this.autoplay, false);
            document.removeEventListener('WeixinJSBridgeReady', _this.autoplay, false);
            document.removeEventListener('WeiboJSBridgeReady', _this.autoplay, false);
        };

        _this.togglePlay = function () {
            var player = _this.refs.player;

            _this.userClicked = true; //标示用户已操作过

            player.paused ? player.play() : player.pause();
        };

        _this.state = {
            playing: props.autoplay
        };
        return _this;
    }

    _createClass(BGM, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.refs.box.addEventListener('click', this.togglePlay, false);
            this.refs.player.addEventListener('pause', this.onpause, false);
            this.refs.player.addEventListener('play', this.onplay, false);

            if (this.props.autoplay) {
                this.autoplay();
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.refs.box.removeEventListener('click', this.togglePlay, false);
            this.refs.player.addEventListener('pause', this.onpause, false);
            this.refs.player.addEventListener('play', this.onplay, false);

            if (this.props.autoplay) {
                this.unhandle();
            }
        }

        //支持微信、微博下自动播放

    }, {
        key: 'render',
        value: function render() {
            var playing = this.state.playing;
            var _props = this.props,
                className = _props.className,
                autoplay = _props.autoplay,
                loop = _props.loop,
                component = _props.component;

            var children = component || this.props.children;

            if (typeof children === 'function') {
                var Children = children;

                children = React.createElement(Children, { playing: playing, paused: !playing });
            }

            return React.createElement(
                'div',
                {
                    className: (className ? className + ' ' : '') + 'bgm-box ' + (this.state.playing ? 'bgm-playing' : 'bgm-paused'),
                    ref: 'box' },
                React.createElement('audio', { autoPlay: autoplay, loop: loop, src: this.props.src, className: 'player', ref: 'player' }),
                children || React.createElement('div', { className: 'music' })
            );
        }
    }]);

    return BGM;
}(Component);

BGM.defaultProps = {
    autoplay: true,
    loop: true
};
BGM.propTypes = {
    src: PropTypes.string.isRequired,
    autoplay: PropTypes.bool,
    loop: PropTypes.bool,
    onplay: PropTypes.func,
    onpause: PropTypes.func,
    component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func])
};


export default BGM;