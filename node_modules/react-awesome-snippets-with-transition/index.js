var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import { CSSTransition } from 'react-transition-group';

export default function withTransition(defaultProps) {
    var _class, _temp;

    return _temp = _class = function (_React$Component) {
        _inherits(Transition, _React$Component);

        function Transition() {
            _classCallCheck(this, Transition);

            return _possibleConstructorReturn(this, (Transition.__proto__ || Object.getPrototypeOf(Transition)).apply(this, arguments));
        }

        _createClass(Transition, [{
            key: 'render',
            value: function render() {
                var _props = this.props,
                    children = _props.children,
                    props = _objectWithoutProperties(_props, ['children']);

                return React.createElement(
                    CSSTransition,
                    Object.assign({}, props, {
                        addEndListener: function addEndListener(node, done) {
                            node.addEventListener('transitionend', function (e) {
                                //确保动画来自于目标节点
                                if (e.target === node) {
                                    done();
                                }
                            }, false);
                        } }),
                    children
                );
            }
        }]);

        return Transition;
    }(React.Component), _class.defaultProps = Object.assign({
        timeout: 1000,
        unmountOnExit: true
    }, defaultProps), _class.propTypes = {
        classNames: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired
    }, _temp;
}